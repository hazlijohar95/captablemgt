name: Security Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security checks daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run npm audit
      run: npm audit --audit-level=moderate
    
    - name: Check for vulnerable dependencies
      run: npx audit-ci --moderate
    
    - name: Scan for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  code-security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security-focused tests
      run: npm test -- --reporter=json --outputFile=security-test-results.json src/services/authorizationService.security.test.ts src/services/csrfService.test.ts
    
    - name: Check for hardcoded secrets in code
      run: |
        if grep -r -i "password\|secret\|key\|token" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" src/ | grep -v "test" | grep -v "mock" | grep -i -E "(password|secret|key|token)\s*[:=]\s*[\"'][^\"']+[\"']"; then
          echo "‚ùå Potential hardcoded secrets found!"
          exit 1
        else
          echo "‚úÖ No hardcoded secrets detected"
        fi
    
    - name: Verify environment variable usage
      run: |
        echo "Checking for proper environment variable usage..."
        if grep -r "process\.env\." src/ | grep -v "VITE_"; then
          echo "Warning: Non-VITE environment variables found in frontend code"
        fi

  dependency-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Check for outdated dependencies
      run: npm outdated || true
    
    - name: Check for deprecated dependencies
      run: npx check-dependencies
      continue-on-error: true
    
    - name: Generate dependency report
      run: |
        echo "## Dependency Security Report" > dependency-report.md
        echo "Generated on: $(date)" >> dependency-report.md
        echo "" >> dependency-report.md
        echo "### High-risk dependencies:" >> dependency-report.md
        npm audit --json | jq '.vulnerabilities | to_entries[] | select(.value.severity == "high" or .value.severity == "critical")' >> dependency-report.md || true
    
    - name: Upload dependency report
      uses: actions/upload-artifact@v4
      with:
        name: dependency-security-report
        path: dependency-report.md

  rls-verification:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check for RLS bypass attempts
      run: |
        echo "Checking for dangerous RLS-related files..."
        if find . -name "*disable*rls*" -o -name "*rls*disable*" | grep -q .; then
          echo "‚ùå Dangerous RLS disable files found!"
          find . -name "*disable*rls*" -o -name "*rls*disable*"
          exit 1
        else
          echo "‚úÖ No dangerous RLS files found"
        fi
    
    - name: Verify no unsafe SQL in repository
      run: |
        echo "Checking for unsafe SQL patterns..."
        if grep -r -i "alter.*rowsecurity" --include="*.sql" . | grep -i "disable"; then
          echo "‚ùå Unsafe RLS disable SQL found!"
          exit 1
        else
          echo "‚úÖ No unsafe RLS disable SQL found"
        fi
    
    - name: Check for proper multi-tenant isolation
      run: |
        echo "Verifying multi-tenant patterns in code..."
        if ! grep -r "company_id" src/services/ | grep -q .; then
          echo "Warning: Limited company_id usage found in services"
        fi

  notify-security:
    runs-on: ubuntu-latest
    needs: [security-audit, code-security, dependency-check, rls-verification]
    if: always()
    
    steps:
    - name: Security check summary
      run: |
        if [[ "${{ needs.security-audit.result }}" == "success" && "${{ needs.code-security.result }}" == "success" && "${{ needs.dependency-check.result }}" == "success" && "${{ needs.rls-verification.result }}" == "success" ]]; then
          echo "üîí All security checks passed successfully"
        else
          echo "üö® Security issues detected - review required"
          echo "Security Audit: ${{ needs.security-audit.result }}"
          echo "Code Security: ${{ needs.code-security.result }}"
          echo "Dependency Check: ${{ needs.dependency-check.result }}"
          echo "RLS Verification: ${{ needs.rls-verification.result }}"
        fi
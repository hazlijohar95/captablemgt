import React, { useState, useEffect, useRef } from 'react';\nimport { activityFeedService, INotification, INotificationFilter } from '../../services/collaboration/activityFeed';\nimport { \n  BellIcon,\n  XMarkIcon,\n  CheckIcon,\n  ExclamationTriangleIcon,\n  ChatBubbleLeftIcon,\n  UserIcon,\n  CogIcon,\n  TrashIcon\n} from '@heroicons/react/24/outline';\nimport { BellIcon as SolidBellIcon } from '@heroicons/react/24/solid';\nimport { formatDistanceToNow } from 'date-fns';\n\ninterface INotificationCenterProps {\n  userId: string;\n  className?: string;\n}\n\ninterface INotificationItemProps {\n  notification: INotification;\n  onMarkAsRead: (id: string) => void;\n  onDelete: (id: string) => void;\n  onAction?: (notification: INotification) => void;\n}\n\nconst NotificationItem: React.FC<INotificationItemProps> = ({\n  notification,\n  onMarkAsRead,\n  onDelete,\n  onAction\n}) => {\n  const getNotificationIcon = (type: string) => {\n    switch (type) {\n      case 'mention':\n        return <ChatBubbleLeftIcon className=\"w-5 h-5\" />;\n      case 'conflict':\n        return <ExclamationTriangleIcon className=\"w-5 h-5\" />;\n      case 'approval':\n        return <CheckIcon className=\"w-5 h-5\" />;\n      case 'system':\n        return <CogIcon className=\"w-5 h-5\" />;\n      case 'activity':\n      default:\n        return <UserIcon className=\"w-5 h-5\" />;\n    }\n  };\n\n  const getNotificationColor = (type: string, priority: string) => {\n    if (priority === 'urgent') return 'text-red-600';\n    if (priority === 'high') return 'text-orange-600';\n    \n    switch (type) {\n      case 'conflict':\n        return 'text-red-600';\n      case 'approval':\n        return 'text-green-600';\n      case 'mention':\n        return 'text-blue-600';\n      case 'system':\n        return 'text-gray-600';\n      default:\n        return 'text-blue-600';\n    }\n  };\n\n  const getPriorityBadge = (priority: string) => {\n    switch (priority) {\n      case 'urgent':\n        return (\n          <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800\">\n            Urgent\n          </span>\n        );\n      case 'high':\n        return (\n          <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-orange-100 text-orange-800\">\n            High\n          </span>\n        );\n      case 'medium':\n        return (\n          <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800\">\n            Medium\n          </span>\n        );\n      default:\n        return null;\n    }\n  };\n\n  const handleAction = () => {\n    if (notification.actionUrl) {\n      window.location.href = notification.actionUrl;\n    }\n    if (onAction) {\n      onAction(notification);\n    }\n  };\n\n  return (\n    <div className={`\n      p-4 border-l-4 hover:bg-gray-50 transition-colors\n      ${notification.isRead ? 'bg-white border-l-gray-200' : 'bg-blue-50 border-l-blue-500'}\n    `}>\n      <div className=\"flex items-start space-x-3\">\n        {/* Icon */}\n        <div className={`\n          flex-shrink-0 ${getNotificationColor(notification.type, notification.priority)}\n        `}>\n          {getNotificationIcon(notification.type)}\n        </div>\n\n        {/* Content */}\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex-1\">\n              <h4 className=\"text-sm font-medium text-gray-900\">\n                {notification.title}\n              </h4>\n              <p className=\"text-sm text-gray-600 mt-1\">\n                {notification.message}\n              </p>\n              \n              <div className=\"flex items-center space-x-3 mt-2\">\n                <span className=\"text-xs text-gray-500\">\n                  {formatDistanceToNow(notification.createdAt, { addSuffix: true })}\n                </span>\n                {getPriorityBadge(notification.priority)}\n                {notification.expiresAt && (\n                  <span className=\"text-xs text-gray-500\">\n                    Expires {formatDistanceToNow(notification.expiresAt, { addSuffix: true })}\n                  </span>\n                )}\n              </div>\n            </div>\n\n            {/* Actions */}\n            <div className=\"flex items-center space-x-2 ml-4\">\n              {!notification.isRead && (\n                <button\n                  onClick={() => onMarkAsRead(notification.id)}\n                  className=\"text-blue-600 hover:text-blue-800 text-xs font-medium\"\n                  title=\"Mark as read\"\n                >\n                  <CheckIcon className=\"w-4 h-4\" />\n                </button>\n              )}\n              <button\n                onClick={() => onDelete(notification.id)}\n                className=\"text-gray-400 hover:text-red-600 text-xs\"\n                title=\"Delete notification\"\n              >\n                <TrashIcon className=\"w-4 h-4\" />\n              </button>\n            </div>\n          </div>\n\n          {/* Action Button */}\n          {notification.actionUrl && notification.actionText && (\n            <div className=\"mt-3\">\n              <button\n                onClick={handleAction}\n                className=\"inline-flex items-center px-3 py-1 border border-gray-300 shadow-sm text-xs font-medium rounded text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n              >\n                {notification.actionText}\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const NotificationCenter: React.FC<INotificationCenterProps> = ({\n  userId,\n  className = ''\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [notifications, setNotifications] = useState<INotification[]>([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [filter, setFilter] = useState<INotificationFilter>({\n    userId,\n    limit: 20\n  });\n  const [hasMore, setHasMore] = useState(false);\n  const [activeTab, setActiveTab] = useState<'all' | 'unread' | 'high'>('all');\n  \n  const dropdownRef = useRef<HTMLDivElement>(null);\n  const unsubscribeRef = useRef<(() => void) | null>(null);\n\n  // Load notifications\n  const loadNotifications = async (newFilter?: INotificationFilter) => {\n    setIsLoading(true);\n    try {\n      const filterToUse = newFilter || filter;\n      const result = await activityFeedService.getNotifications(filterToUse);\n      \n      if (filterToUse.offset && filterToUse.offset > 0) {\n        setNotifications(prev => [...prev, ...result.notifications]);\n      } else {\n        setNotifications(result.notifications);\n      }\n      \n      setUnreadCount(result.unreadCount);\n      setHasMore(result.hasMore);\n    } catch (error) {\n      console.error('Failed to load notifications:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Handle tab change\n  const handleTabChange = (tab: 'all' | 'unread' | 'high') => {\n    setActiveTab(tab);\n    \n    let newFilter: INotificationFilter = {\n      ...filter,\n      offset: 0\n    };\n    \n    switch (tab) {\n      case 'unread':\n        newFilter.isRead = false;\n        break;\n      case 'high':\n        newFilter.priority = ['high', 'urgent'];\n        break;\n      default:\n        newFilter.isRead = undefined;\n        newFilter.priority = undefined;\n    }\n    \n    setFilter(newFilter);\n    loadNotifications(newFilter);\n  };\n\n  // Mark notification as read\n  const handleMarkAsRead = async (notificationId: string) => {\n    try {\n      await activityFeedService.markNotificationAsRead(notificationId);\n      \n      setNotifications(prev => \n        prev.map(n => \n          n.id === notificationId ? { ...n, isRead: true } : n\n        )\n      );\n      \n      setUnreadCount(prev => Math.max(0, prev - 1));\n    } catch (error) {\n      console.error('Failed to mark notification as read:', error);\n    }\n  };\n\n  // Delete notification\n  const handleDelete = async (notificationId: string) => {\n    try {\n      await activityFeedService.deleteNotification(notificationId);\n      \n      const notification = notifications.find(n => n.id === notificationId);\n      \n      setNotifications(prev => prev.filter(n => n.id !== notificationId));\n      \n      if (notification && !notification.isRead) {\n        setUnreadCount(prev => Math.max(0, prev - 1));\n      }\n    } catch (error) {\n      console.error('Failed to delete notification:', error);\n    }\n  };\n\n  // Mark all as read\n  const handleMarkAllAsRead = async () => {\n    try {\n      await activityFeedService.markAllNotificationsAsRead(userId);\n      \n      setNotifications(prev => prev.map(n => ({ ...n, isRead: true })));\n      setUnreadCount(0);\n    } catch (error) {\n      console.error('Failed to mark all notifications as read:', error);\n    }\n  };\n\n  // Load more notifications\n  const handleLoadMore = () => {\n    const newFilter = {\n      ...filter,\n      offset: notifications.length\n    };\n    loadNotifications(newFilter);\n  };\n\n  // Initialize\n  useEffect(() => {\n    loadNotifications();\n    \n    // Set up real-time subscription\n    unsubscribeRef.current = activityFeedService.subscribeToNotifications(\n      userId,\n      (newNotifications) => {\n        setNotifications(prev => {\n          const existingIds = new Set(prev.map(n => n.id));\n          const uniqueNewNotifications = newNotifications.filter(n => !existingIds.has(n.id));\n          \n          if (uniqueNewNotifications.length > 0) {\n            const newUnreadCount = uniqueNewNotifications.filter(n => !n.isRead).length;\n            setUnreadCount(prevCount => prevCount + newUnreadCount);\n            \n            return [...uniqueNewNotifications, ...prev];\n          }\n          \n          return prev;\n        });\n      }\n    );\n\n    return () => {\n      if (unsubscribeRef.current) {\n        unsubscribeRef.current();\n      }\n    };\n  }, [userId]);\n\n  // Close dropdown when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setIsOpen(false);\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('mousedown', handleClickOutside);\n      return () => document.removeEventListener('mousedown', handleClickOutside);\n    }\n  }, [isOpen]);\n\n  return (\n    <div className={`relative ${className}`} ref={dropdownRef}>\n      {/* Notification Button */}\n      <button\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"relative p-2 text-gray-600 hover:text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 rounded-md\"\n      >\n        {unreadCount > 0 ? (\n          <SolidBellIcon className=\"w-6 h-6\" />\n        ) : (\n          <BellIcon className=\"w-6 h-6\" />\n        )}\n        \n        {/* Unread badge */}\n        {unreadCount > 0 && (\n          <span className=\"absolute -top-1 -right-1 h-5 w-5 bg-red-600 text-white rounded-full flex items-center justify-center text-xs font-medium\">\n            {unreadCount > 99 ? '99+' : unreadCount}\n          </span>\n        )}\n      </button>\n\n      {/* Notification Dropdown */}\n      {isOpen && (\n        <div className=\"absolute right-0 mt-2 w-96 bg-white rounded-lg shadow-lg border border-gray-200 z-50\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between p-4 border-b border-gray-200\">\n            <h3 className=\"text-lg font-medium text-gray-900\">Notifications</h3>\n            <div className=\"flex items-center space-x-2\">\n              {unreadCount > 0 && (\n                <button\n                  onClick={handleMarkAllAsRead}\n                  className=\"text-sm text-blue-600 hover:text-blue-800 font-medium\"\n                >\n                  Mark all read\n                </button>\n              )}\n              <button\n                onClick={() => setIsOpen(false)}\n                className=\"text-gray-400 hover:text-gray-600\"\n              >\n                <XMarkIcon className=\"w-5 h-5\" />\n              </button>\n            </div>\n          </div>\n\n          {/* Tabs */}\n          <div className=\"flex border-b border-gray-200\">\n            {[\n              { key: 'all', label: 'All', count: notifications.length },\n              { key: 'unread', label: 'Unread', count: unreadCount },\n              { key: 'high', label: 'High Priority', count: notifications.filter(n => ['high', 'urgent'].includes(n.priority)).length }\n            ].map(tab => (\n              <button\n                key={tab.key}\n                onClick={() => handleTabChange(tab.key as any)}\n                className={`\n                  flex-1 px-4 py-2 text-sm font-medium border-b-2 transition-colors\n                  ${activeTab === tab.key\n                    ? 'border-blue-500 text-blue-600'\n                    : 'border-transparent text-gray-500 hover:text-gray-700'\n                  }\n                `}\n              >\n                {tab.label}\n                {tab.count > 0 && (\n                  <span className={`\n                    ml-2 inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium\n                    ${activeTab === tab.key\n                      ? 'bg-blue-100 text-blue-800'\n                      : 'bg-gray-100 text-gray-800'\n                    }\n                  `}>\n                    {tab.count}\n                  </span>\n                )}\n              </button>\n            ))}\n          </div>\n\n          {/* Notifications List */}\n          <div className=\"max-h-96 overflow-y-auto\">\n            {isLoading && notifications.length === 0 ? (\n              <div className=\"p-8 text-center\">\n                <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600 mx-auto\"></div>\n                <p className=\"text-gray-600 mt-2 text-sm\">Loading notifications...</p>\n              </div>\n            ) : notifications.length === 0 ? (\n              <div className=\"p-8 text-center\">\n                <BellIcon className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-gray-600\">No notifications</p>\n                <p className=\"text-sm text-gray-500 mt-1\">\n                  {activeTab === 'unread' \n                    ? \"You're all caught up!\"\n                    : 'Notifications will appear here'\n                  }\n                </p>\n              </div>\n            ) : (\n              <div>\n                {notifications.map(notification => (\n                  <NotificationItem\n                    key={notification.id}\n                    notification={notification}\n                    onMarkAsRead={handleMarkAsRead}\n                    onDelete={handleDelete}\n                  />\n                ))}\n                \n                {/* Load More */}\n                {hasMore && (\n                  <div className=\"p-4 border-t border-gray-200 text-center\">\n                    <button\n                      onClick={handleLoadMore}\n                      disabled={isLoading}\n                      className=\"text-sm text-blue-600 hover:text-blue-800 font-medium\"\n                    >\n                      {isLoading ? 'Loading...' : 'Load More'}\n                    </button>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};"
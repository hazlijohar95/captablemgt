import React, { useState } from 'react';\nimport { ISessionParticipant } from '../../services/collaboration/websocketServer';\nimport { \n  UserIcon, \n  WifiIcon, \n  ExclamationTriangleIcon,\n  ChevronDownIcon,\n  ChevronUpIcon\n} from '@heroicons/react/24/outline';\nimport { \n  CheckCircleIcon as SolidCheckCircleIcon,\n  XCircleIcon as SolidXCircleIcon\n} from '@heroicons/react/24/solid';\n\ninterface ICollaborationToolbarProps {\n  isConnected: boolean;\n  connectionState: 'connecting' | 'connected' | 'disconnected' | 'error';\n  participants: ISessionParticipant[];\n  conflictCount: number;\n}\n\ninterface IParticipantAvatarProps {\n  participant: ISessionParticipant;\n  showDetails?: boolean;\n}\n\nconst ParticipantAvatar: React.FC<IParticipantAvatarProps> = ({ \n  participant, \n  showDetails = false \n}) => {\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'bg-green-500';\n      case 'idle':\n        return 'bg-yellow-500';\n      case 'away':\n        return 'bg-gray-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'Active';\n      case 'idle':\n        return 'Idle';\n      case 'away':\n        return 'Away';\n      default:\n        return 'Unknown';\n    }\n  };\n\n  return (\n    <div className=\"relative group\">\n      <div className=\"relative\">\n        {participant.userAvatar ? (\n          <img\n            src={participant.userAvatar}\n            alt={participant.userName}\n            className=\"w-8 h-8 rounded-full border-2 border-white shadow-sm\"\n          />\n        ) : (\n          <div className=\"w-8 h-8 rounded-full bg-gray-300 border-2 border-white shadow-sm flex items-center justify-center\">\n            <UserIcon className=\"w-4 h-4 text-gray-600\" />\n          </div>\n        )}\n        \n        {/* Status Indicator */}\n        <div className={`absolute -bottom-1 -right-1 w-3 h-3 rounded-full border-2 border-white ${getStatusColor(participant.status)}`}></div>\n      </div>\n\n      {/* Tooltip */}\n      {showDetails && (\n        <div className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-gray-900 text-white text-xs rounded-lg shadow-lg whitespace-nowrap opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none z-50\">\n          <div className=\"text-center\">\n            <div className=\"font-medium\">{participant.userName}</div>\n            <div className=\"text-gray-300\">{participant.userEmail}</div>\n            <div className=\"text-gray-400 mt-1\">\n              Status: {getStatusText(participant.status)}\n            </div>\n            <div className=\"text-gray-400\">\n              Joined: {new Date(participant.joinedAt).toLocaleTimeString()}\n            </div>\n          </div>\n          {/* Tooltip arrow */}\n          <div className=\"absolute top-full left-1/2 transform -translate-x-1/2 w-2 h-2 bg-gray-900 rotate-45\"></div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst ConnectionStatusIndicator: React.FC<{ \n  isConnected: boolean; \n  connectionState: string;\n}> = ({ isConnected, connectionState }) => {\n  const getStatusIcon = () => {\n    switch (connectionState) {\n      case 'connected':\n        return <SolidCheckCircleIcon className=\"w-5 h-5 text-green-500\" />;\n      case 'connecting':\n        return (\n          <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-blue-500\"></div>\n        );\n      case 'error':\n        return <SolidXCircleIcon className=\"w-5 h-5 text-red-500\" />;\n      default:\n        return <WifiIcon className=\"w-5 h-5 text-gray-500\" />;\n    }\n  };\n\n  const getStatusText = () => {\n    switch (connectionState) {\n      case 'connected':\n        return 'Connected';\n      case 'connecting':\n        return 'Connecting...';\n      case 'error':\n        return 'Connection Error';\n      case 'disconnected':\n        return 'Disconnected';\n      default:\n        return 'Unknown';\n    }\n  };\n\n  const getStatusColor = () => {\n    switch (connectionState) {\n      case 'connected':\n        return 'text-green-700 bg-green-50 border-green-200';\n      case 'connecting':\n        return 'text-blue-700 bg-blue-50 border-blue-200';\n      case 'error':\n        return 'text-red-700 bg-red-50 border-red-200';\n      default:\n        return 'text-gray-700 bg-gray-50 border-gray-200';\n    }\n  };\n\n  return (\n    <div className={`flex items-center space-x-2 px-3 py-1 rounded-lg border text-sm ${getStatusColor()}`}>\n      {getStatusIcon()}\n      <span className=\"font-medium\">{getStatusText()}</span>\n    </div>\n  );\n};\n\nexport const CollaborationToolbar: React.FC<ICollaborationToolbarProps> = ({\n  isConnected,\n  connectionState,\n  participants,\n  conflictCount\n}) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [showAllParticipants, setShowAllParticipants] = useState(false);\n\n  const activeParticipants = participants.filter(p => p.status === 'active');\n  const idleParticipants = participants.filter(p => p.status === 'idle');\n  const awayParticipants = participants.filter(p => p.status === 'away');\n\n  const displayedParticipants = showAllParticipants \n    ? participants \n    : participants.slice(0, 5);\n\n  const hiddenCount = participants.length - displayedParticipants.length;\n\n  return (\n    <div className=\"bg-white border-b border-gray-200 shadow-sm\">\n      <div className=\"flex items-center justify-between p-3\">\n        {/* Left Side - Connection Status */}\n        <div className=\"flex items-center space-x-4\">\n          <ConnectionStatusIndicator \n            isConnected={isConnected} \n            connectionState={connectionState} \n          />\n          \n          {/* Participants Count */}\n          <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n            <UserIcon className=\"w-4 h-4\" />\n            <span>\n              {participants.length} participant{participants.length !== 1 ? 's' : ''}\n            </span>\n            {activeParticipants.length > 0 && (\n              <span className=\"text-green-600\">({activeParticipants.length} active)</span>\n            )}\n          </div>\n        </div>\n\n        {/* Right Side - Participants and Controls */}\n        <div className=\"flex items-center space-x-4\">\n          {/* Conflict Indicator */}\n          {conflictCount > 0 && (\n            <div className=\"flex items-center space-x-2 px-3 py-1 bg-amber-50 border border-amber-200 rounded-lg text-amber-700 text-sm\">\n              <ExclamationTriangleIcon className=\"w-4 h-4\" />\n              <span className=\"font-medium\">\n                {conflictCount} conflict{conflictCount !== 1 ? 's' : ''}\n              </span>\n            </div>\n          )}\n\n          {/* Participant Avatars */}\n          {participants.length > 0 && (\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"flex -space-x-2\">\n                {displayedParticipants.map((participant) => (\n                  <ParticipantAvatar \n                    key={participant.userId}\n                    participant={participant} \n                    showDetails\n                  />\n                ))}\n                \n                {hiddenCount > 0 && (\n                  <button\n                    onClick={() => setShowAllParticipants(!showAllParticipants)}\n                    className=\"w-8 h-8 rounded-full bg-gray-100 border-2 border-white shadow-sm flex items-center justify-center text-xs font-medium text-gray-600 hover:bg-gray-200 transition-colors\"\n                  >\n                    +{hiddenCount}\n                  </button>\n                )}\n              </div>\n\n              {/* Expand/Collapse Button */}\n              <button\n                onClick={() => setIsExpanded(!isExpanded)}\n                className=\"text-gray-500 hover:text-gray-700 transition-colors\"\n              >\n                {isExpanded ? (\n                  <ChevronUpIcon className=\"w-4 h-4\" />\n                ) : (\n                  <ChevronDownIcon className=\"w-4 h-4\" />\n                )}\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Expanded Details */}\n      {isExpanded && participants.length > 0 && (\n        <div className=\"border-t border-gray-100 bg-gray-50 px-3 py-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            {/* Active Participants */}\n            {activeParticipants.length > 0 && (\n              <div>\n                <h4 className=\"text-xs font-medium text-gray-500 uppercase tracking-wider mb-2\">\n                  Active ({activeParticipants.length})\n                </h4>\n                <div className=\"space-y-2\">\n                  {activeParticipants.map((participant) => (\n                    <div key={participant.userId} className=\"flex items-center space-x-2 text-sm\">\n                      <ParticipantAvatar participant={participant} />\n                      <div>\n                        <div className=\"font-medium text-gray-900\">{participant.userName}</div>\n                        <div className=\"text-gray-500\">{participant.userEmail}</div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Idle Participants */}\n            {idleParticipants.length > 0 && (\n              <div>\n                <h4 className=\"text-xs font-medium text-gray-500 uppercase tracking-wider mb-2\">\n                  Idle ({idleParticipants.length})\n                </h4>\n                <div className=\"space-y-2\">\n                  {idleParticipants.map((participant) => (\n                    <div key={participant.userId} className=\"flex items-center space-x-2 text-sm\">\n                      <ParticipantAvatar participant={participant} />\n                      <div>\n                        <div className=\"font-medium text-gray-700\">{participant.userName}</div>\n                        <div className=\"text-gray-500\">{participant.userEmail}</div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Away Participants */}\n            {awayParticipants.length > 0 && (\n              <div>\n                <h4 className=\"text-xs font-medium text-gray-500 uppercase tracking-wider mb-2\">\n                  Away ({awayParticipants.length})\n                </h4>\n                <div className=\"space-y-2\">\n                  {awayParticipants.map((participant) => (\n                    <div key={participant.userId} className=\"flex items-center space-x-2 text-sm opacity-60\">\n                      <ParticipantAvatar participant={participant} />\n                      <div>\n                        <div className=\"font-medium text-gray-600\">{participant.userName}</div>\n                        <div className=\"text-gray-500\">{participant.userEmail}</div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Session Info */}\n          <div className=\"mt-4 pt-4 border-t border-gray-200\">\n            <div className=\"flex items-center justify-between text-xs text-gray-500\">\n              <div>\n                Collaboration session active\n              </div>\n              <div>\n                Real-time sync {isConnected ? 'enabled' : 'disabled'}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};